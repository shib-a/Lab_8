@startuml

interface Breakable{
    + void breakSelf()
}
interface Resembleable{
    + void resemble(String what)
}
interface Excavatable{
    + void getExcavated()
}

abstract class Human{
     # String name
     + read(String what)
     + talk(String what)
     + write(String what)
     + String getName()
     + Human(String name)
}
abstract class GeologicalFormation{
    # String  durability
    + String getDurability()
    + GeologicalFormation(String durability)
}
abstract class Animal{
    # bool isAlive
    + bool getIsAlive()
    + Animal(bool isAlive)
}

enum Stat{
    HP
    INTELLIGENCE
    LUCK
    DAMAGE
    SANITY
}
enum Period{
    CRETATIOUS ("Меловой")
    EOCENOS ("Эоцен")
    JURASSIC ("Юрский")
    MIOCENOS ("Миоцен")
    UNSPECIFIED ("Неизвестный")
}
enum ResearcherType{
    EXPEDITIONIST
    FOLK_RESEARCHER
}
ResearcherType -- Researcher
class Researcher extends Human{
    # ResearcherType type
    + read()
    + write()
    + talk()
    + ResearcherType getType()
    + Researcher(String name,ResearcherType type)
}
class Creature extends Animal implements Resembleable{
    # isAlive = False
    + void resemble(String what)
    + Creature()
}
class Dog extends Animal{
    # isAlive = True
    + bark()
    + Dog()
}
class GeologicalLayer extends GeologicalFormation implements Excavatable{
    # String agePeriod
    #durability = "Durable"
    + void getExcavated()
    + String getAgePeriod()
    + GeologicalLayer()
}
class Stalagmite extends GeologicalFormation implements Breakable{
    # durability = "Very durable"
    + hang()
    + void breakSelf()
    + Stalagmite()
}
class LimeStone extends GeologicalFormation{
    # durability = "Durable"
    + keepIntact()
    + LimeStone()
}
@enduml